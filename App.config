<?xml version="1.0" encoding="utf-8"?>
<configuration>

  <configSections>
    <section name="Logger" type="System.Configuration.NameValueFileSectionHandler, System, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
    <section name="TransferBoBProperties" type="System.Configuration.NameValueFileSectionHandler, System, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  </configSections>

  <startup useLegacyV2RuntimeActivationPolicy="true">
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.8" />
    <requiredRuntime version="v4.0.20506" />
  </startup>

  <system.diagnostics>

    <trace autoflush="true" indentsize="2">
      <listeners>
        <remove name="Default" />
        <add name="TraceLogListener" type="System.Diagnostics.TextWriterTraceListener" initializeData="SADBSConveyor.log" />

        <!--Use the follwing value settings to use the application log:

					<add name="EventLogListener"
						type="System.Diagnostics.EventLogTraceListener"
						initializeData="THE NAME OF YOUR APPLICATION"/>
				/-->
        <add name="EventLogListener" type="System.Diagnostics.EventLogTraceListener" initializeData="SADBSConveyor" />

        <add name="FTPLogListener" type="System.Diagnostics.TextWriterTraceListener" initializeData="FTPCmdReplies.log" />

      </listeners>
    </trace>

    <switches>
      <!--
				Off 	0	no messages to Trace Listeners
				Error	1	only error messages to Trace Listeners
				Warning	2	error and warning messages to Trace Listeners
				Info	3	informational, warning and error messages to Trace Listeners
				Verbose	4	all messages to Trace Listeners
			/-->
      <add name="TraceSwitch" value="4" />
      <add name="EventSwitch" value="4" />
      <add name="FTPSwitch" value="1" />
    </switches>

  </system.diagnostics>

  <Logger>
    <!--Use the follwing value settings to use the application log:

			<add key="EventLogSourceName" value="THE NAME OF YOUR APPLICATION" />
			<add key="EventLogLogName" value="application" />

			Use something like the following to write to a new Event Log (not application log):

			<add key="EventLogSourceName" value="TestLogger" />
			<add key="EventLogLogName" value="TestLoggerLog" />
		/-->
    <add key="EventLogSourceName" value="SADBSConveyor" />
    <add key="EventLogLogName" value="application" />

    <add key="TraceLog" value="TraceLogListener" />
    <add key="EventLog" value="EventLogListener" />
    <add key="FTPLog" value="FTPLogListener" />
    <add key="TraceLogSwitch" value="TraceSwitch" />
    <add key="EventLogSwitch" value="EventSwitch" />
    <add key="FTPLogSwitch" value="FTPSwitch" />
    <add key="EventLogLifeDays" value="1" />
    <add key="FTPLogLifeDays" value="7" />
    <add key="LogForService" value="True" />
    <!-- true = log for service common app base path, false = log for user local program data path -->
  </Logger>

  <TransferBoBProperties>
    <!--Use the following as default value settings for TransferBoB (SyncMule or OmniBeast):
    <add key="RetryCount" value="3" />                  Number of times will retry most commands if they fail
    <add key="RetryDelay" value="5000" />               Milliseconds to wait between a retry event
    <add key="CommandTimeout" value="20000" />          Milliseconds a command will wait before it gives up and goes into a retry
    <add key="LogLevel" value="2" />                    Exception Logging level: Fatal = 0, Error = 1, Warn = 2, Info = 3, Debug = 4, All = 10
    <add key="ServerRepliesToReplyLog" value="True" />  Turn command and reply logging on or off
		/-->
    <add key="RetryCount" value="3" />
    <add key="RetryDelay" value="5000" />
    <add key="CommandTimeout" value="20000" />
    <add key="LogLevel" value="3" />
    <add key="ServerRepliesToReplyLog" value="True" />
  </TransferBoBProperties>


  <appSettings>

    <!--
      TestPlaylistXMLPath - set a directory to save playlist xml files for testing purposes.
      Usage:  Uncomment the setting and make sure the path exists, 
              then Intermediate playlist xmls will be copied to specified directory
    -->
    <!-- <add key="TestPlaylistXMLPath" value="c:\bogus" />  -->
    
    <!-- http://devwell.muzak.com/Mood.PlaylistExport/ -->
    <!-- WELL dev -->
    <!-- http://dev-well-20-n4.muzak.com/mood.playlistexport/ -->
    <!-- WELL regression -->
    <add key="endpoint_url" value="bogus" />
    <add key="endpoint_target_platform" value="PFBC" />

    <add key="database_server" value="your server name" />
    <add key="database_name" value="your database name" />
    <add key="database_username" value="your db user" />
    <add key="database_password" value="your db password" />

    <add key="AmazonS3AccessKey" value="AKIAJOJK7J76TE4QSGIA" />
    <add key="AmazonS3SecretKey" value="JI7T/UkM6vzer+GOvK2lRmpqQMiL6HxNJ53Q2VtX" />

    <!-- ip address that Athensa equipment will use to retrieve content files -->
    <add key="athensa_ip" value="128.0.0.1" />
    
    <!-- upload modes: unc, netcred, ftp,  -->
    <!-- ftp: mp2 files will be uploaded to ftp -->
    <!-- unc: mp2 files will be uploaded via UNC -->
    <!-- netcred: mp2 files will be uploaded using the "netcred" destination settings -->
    <add key="upload_mode" value="ftp" />
    
    <!-- FTP destination -->
    <add key="ftp_protocol" value="sftp" />
    <!--ftp or sftp -->
    <add key="ftp_ip" value="127.0.0.1" />
    <add key="ftp_content_root" value="/content" />
    <add key="ftp_xml_root" value="/xml" />
    <add key="ftp_username" value="glen" />
    <add key="ftp_password" value="glen" />
    <add key="ftp_port" value="22" />
    <add key="ftp_passive" value="false" />

    <!-- netcred destination -->
    <add key="netcred_computer_name" value="jamesl" />
    <add key="netcred_domain" value="jamesl" />
    <add key="netcred_user_name" value="test" />
    <add key="netcred_password" value="abcd1234!" />
    <!-- important!!! do not place leading slashes in front of these net cred paths! -->
    <add key="netcred_content_save_path" value="d$\tempdir\SADBSShare\content" />
    <add key="netcred_xml_save_path" value="d$\tempdir\SADBSShare\xml" />
    
    <!--  if enable_crc = true, a crc check will be performed by calling the
          crc service that is running on the ftp server at the specified port. -->
    <add key="enable_crc" value="false" />
    <add key="crcport" value="" />

    <!-- Seconds Conveyor will wait before calling endpoint for next playlist.-->
    <add key="wait_short_seconds" value="60" />
    <!-- Seconds Conveyor will wait before calling endpoint again when no playlist returned.-->
    <add key="wait_long_seconds" value="300" />

    <!--  If priority source server is enabled, Conveyor will use this UNC path to look for content first,
          then if not found, it will use the path in the intermediate playlist XML -->
    <add key="priority_source_server_enable" value="false" />
    <!--
      <add key="priority_source_server_path" value="c:\aaa\local"/>
    -->

    <!-- temp working folder -->
    <add key="path_temp_folder" value="c:\aaa\temp" />
    <!-- Path for the local Intermediate Playlist XML -->
    <add key="path_playlist_xml" value="c:\aaa\playlistxml" />

    <!-- Number of playlists that can be processed simultaneously. -->
    <add key="max_number_playlist_tasks" value="1" />
  
    <!-- (true | false) enable content encryption -->
    <add key="enable_encryption" value="false" />
  
  </appSettings>
  
  <runtime>
  
       <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
  
            <dependentAssembly>
  
                 <assemblyIdentity name="Newtonsoft.Json" publicKeyToken="30ad4fe6b2a6aeed" culture="neutral" />
  
                 <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
  
            </dependentAssembly>
  
       </assemblyBinding>
  
  </runtime>
</configuration>
